import pygame
import time
import math

pygame.init()
surface=pygame.display.set_mode((450,450),pygame.RESIZABLE)
pygame.display.set_caption('Useless game')
pygame.font.init()
pygame.font.get_init()
font_name="Calibri"
font1=pygame.font.SysFont(font_name,32)

line_color=(0,0,0)
start=(50,0)
end=(50,50)
BLACK = (0,0,0)

vel=10

rect= pygame.Rect(100,100,200,200)
circle2_color=(0,0,0)
circle2_center=(200,200)
circle2_radius=180
line_width=5
start=0
end_angle= 320 * math.pi / 180
angular_velocity=0.02

countdown_time = 9
start_ticks = pygame.time.get_ticks()

circle_color=(255,0,0)
x,y=200,250
circle_radius=15

while True:
    pygame.time.delay(10)
    for event in pygame.event.get():
        if event.type==pygame.QUIT:
            pygame.quit()
            quit()
    keys=pygame.key.get_pressed()
    if keys[pygame.K_UP]:
        y-=vel
    if keys[pygame.K_DOWN]:
        y+=vel
    if keys[pygame.K_LEFT]:
        x-=vel
    if keys[pygame.K_RIGHT]:
        x+=vel
    surface.fill((255, 255, 255))
    start+=angular_velocity
    end_angle+=angular_velocity
    distance = math.sqrt((x - circle2_center[0]) ** 2 + (y - circle2_center[1]) ** 2)
    if distance + circle_radius > circle2_radius:
        error_message = font1.render("Object collided", True, BLACK)
    else:
        error_message = None

    seconds_passed = (pygame.time.get_ticks() - start_ticks) / 1000
    remaining_time = max(0, countdown_time - int(seconds_passed))
    if remaining_time <= 0:
        time_up_text = font1.render("Time's up!", True, BLACK)
        surface.blit(time_up_text, (surface.get_width() // 2 - time_up_text.get_width() // 2, 20))
        pygame.display.flip()
        pygame.time.delay(2000)
        pygame.quit()
        sys.exit()

    timer_text = font1.render(f"Ball has only {remaining_time} seconds to escape", True, BLACK)
    surface.blit(timer_text,(surface.get_width() // 2 - timer_text.get_width() // 2, 10))

    pygame.draw.circle(surface, circle_color, (x, y), circle_radius)
    pygame.draw.arc(surface,circle2_color,rect,start,end_angle,line_width)
    if error_message:
        surface.blit(error_message, (100, 50))
    pygame.display.flip()useless 
